$ docker run -d -p 27017:27017 --name mongodb1  mongo 
$ docker exec -it mongodb1 bash
# mongo
>

GUI(Web기반 dashboard)/CLI
Server/Linux -> CLI선호(Overhead 절약)

RESTful URL
  https://velopert.com/436

  http://velopert.com?id=436(GET)
  http://velopert.com(POST)

HTTP GET명령어 인자전달(GET방식)

네이버 검색
https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=1&ie=utf8&query=i+am+a+boy

중고나라
https://cafe.naver.com/joonggonara/826721925

HTTP GET(받기)/POST(보내기)
     GET(보내고 받기) / POST는 GET으로 안되는 경우 처리
   
     URL은 최대 4000자/인자를 노출하기 싫은 경우
           빈 칸(space)이 허용되지 않음

back to basic 

HTTP REST(CRUD) 메서드
-> PUT(create) / GET(retrieve) / POST(update) / DELETE

HTTP 명령어 인자는 ASCII코드

pagenation(페이지단위로 분할출력)
  skip() & limit()
  cf. cursor 현재 작업 레코드

인덱스의 종류
 B-Tree : 기본적인 인덱스, 여러 번 검색 필요
 Hash(검색): 찾아보기/인덱스
          해시함수/테이블->한 번에 검색가능
          충돌문제/개수가 많아지면 많이 발생
          짝수/홀수,
          cf. HashedMap(개수가 작을 때는 Map보다 빠름)

 secure hash(보안해시) - SHA1/2
  : 블럭체인, 충돌가능성이 아주 낮게, 계산이 많이 필요
  : 원본과 보안해시값을 같이 저장
  : 조작여부
    원본 != 보안해시 

 와일드카드 검색 -> 느리고 시스템부하를 발생
 like '%sample%';

 전문검색 인덱스(Full-text index)
 와일드카드와 유사하지만 부하를 줄이는 기술

 n-gram 기반의 전문검색인덱스

 "아버지가 방에 들어가신다" -> 아버지(o)
 2-gram "아버""버지""지가""방에""들어""어가""가신""신다"
 3-gram "아버지" "버지가" "들어가" "어가신" "가신다"
 4-gram "아버지가" "들어가신" "어가신다"

 Geospatial index - B-tree 스타일 거리기반 검색
    외접사각형(bounding box)
    서울시 바운딩 박스

HTML5 = HTML5 + CSS3 + Javascript(ECMAscript:ES) 9
        + SVG(2D) + WebGL(3D)

SVG(Scalable Vector Graphics) <path>

정렬
 - 버블 O(N^2) -----> 힙/퀵 O(NlogN)
 - 알고리즘 복잡도
   O(NlogN) - 데이터가 2배되면 정렬시간 2.8배 느려진다
   O(N^2)   - 데이터가 2배되면 정렬시간은 4배  느려진다

   1,000개 정렬에 1초가 걸리다고 가정하면 
   1,000,000개 정렬하려면 1,000,000초(버블정렬기준)

  Top100/Top1000 일부만 정렬은 O(N)에 가능

JSON - MongoDB import
https://m.blog.naver.com/PostView.nhn?blogId=korn123&logNo=220864724172&proxyReferer=https:%2F%2Fwww.google.com%2F

> quit()
# apt update
# apt install nano
# apt install wget
# wget https://raw.githubusercontent.com/mongodb/docs-assets/primer-dataset/primer-dataset.json
# nano primer-dataset.json

{"address": {"building": "1007", "coord": [-73.856077, 40.848447], "street": "Morris Park Ave", "zipcode": "10462"}, "borough": "Bronx", "cuisine": "Bakery", "grades": [{"date": {"$date": 1393804800000}, "grade": "A", "score": 2}, {"date": {"$date": 1378857600000}, "grade": "A", "score": 6}, {"date": {"$date": 1358985600000

long 1980.1.1 -> 1초에 1000씩 증가하는 값

# /usr/bin/mongoimport --db test --collection restaurants --drop --file primer-dataset.json
# mongo
> show dbs
> use test
> show collections
> db.restaurants.count()
> db.restaurants.find({name:{"$exists":true, $ne:""}}).sort({name:1})

   name is not null/name is null (SQL)

db.restaurants.find({name:{"$exists":true, $eq:""}}).count()

> db.restaurants.find({cuisine:/Bagels/}).sort({name:1})

> db.restaurants.distinct("borough")

employees- district(컬럼)

중복제거
select distinct(district) from employees where borough='Bronx';

bronx에 있는 레스토랑의 개수를 출력하세요.

> db.restaurants.find({borough:/Bronx/}).count()

> db.restaurants.find({"address.zipcode":"11224", "address.building":"2780"})

> db.restaurants.find({"grades.grade":"A"})







